import { Balance, Checkout, Customer, PaymentLink, Price, Product, ProductPrice } from '../types/data';
import { CheckoutItemParams, CreateCheckoutParams, CreateCustomerParams, CreatePaymentLinkParams, CreatePriceParams, CreateProductParams, PaymentLinkItemParams, UpdateCustomerParams, UpdatePaymentLinkParams, UpdatePriceParams, UpdateProductParams } from '../types/param';
import { DeleteItemResponse, ListResponse } from '../types/response';
/**
 * Configuration options for ChargilyClient.
 */
export interface ChargilyClientOptions {
    /**
     * The API key for authentication with Chargily API.
     * @type {string}
     */
    api_key: string;
    /**
     * Operating mode of the client, indicating whether to use the test or live API endpoints.
     * @type {'test' | 'live'}
     */
    mode: 'test' | 'live';
}
/**
 * A client for interacting with Chargily's API, supporting operations for customers, products, prices, checkouts, and payment links.
 */
export declare class ChargilyClient {
    private api_key;
    private base_url;
    /**
     * Constructs a ChargilyClient instance.
     * @param {ChargilyClientOptions} options - Configuration options including API key and mode.
     */
    constructor(options: ChargilyClientOptions);
    /**
     * Internal method to make requests to the Chargily API.
     * @param {string} endpoint - The endpoint path to make the request to.
     * @param {string} [method='GET'] - The HTTP method for the request.
     * @param {Object} [body] - The request payload, necessary for POST or PATCH requests.
     * @returns {Promise<any>} - The JSON response from the API.
     * @private
     */
    private request;
    /**
     * Retrieves the current balance information from the Chargily API.
     * @returns {Promise<Balance>} - A promise that resolves to the balance information.
     */
    getBalance(): Promise<Balance>;
    /**
     * Creates a new customer with specified details.
     * @param {CreateCustomerParams} customer_data - The data for creating a new customer.
     * @returns {Promise<Customer>} - A promise that resolves to the newly created customer.
     */
    createCustomer(customer_data: CreateCustomerParams): Promise<Customer>;
    /**
     * Fetches a customer by their unique identifier.
     * @param {string} customer_id - The ID of the customer to retrieve.
     * @returns {Promise<Customer>} - A promise that resolves to the customer details.
     */
    getCustomer(customer_id: string): Promise<Customer>;
    /**
     * Updates an existing customer's details.
     * @param {string} customer_id - The ID of the customer to update.
     * @param {UpdateCustomerParams} update_data - New data for updating the customer.
     * @returns {Promise<Customer>} - A promise that resolves to the updated customer details.
     */
    updateCustomer(customer_id: string, update_data: UpdateCustomerParams): Promise<Customer>;
    /**
     * Deletes a customer by their unique identifier.
     * @param {string} customer_id - The ID of the customer to delete.
     * @returns {Promise<DeleteItemResponse>} - A promise that resolves to the deletion response.
     */
    deleteCustomer(customer_id: string): Promise<DeleteItemResponse>;
    /**
     * Lists customers, optionally paginated.
     * @param {number} [per_page=10] - The number of customers to return per page.
     * @returns {Promise<ListResponse<Customer>>} - A promise that resolves to a paginated list of customers.
     */
    listCustomers(per_page?: number): Promise<ListResponse<Customer>>;
    /**
     * Creates a new product with the given details.
     * @param {CreateProductParams} product_data - The data for creating the product.
     * @returns {Promise<Product>} The created product.
     */
    createProduct(product_data: CreateProductParams): Promise<Product>;
    /**
     * Updates an existing product identified by its ID.
     * @param {string} product_id - The ID of the product to update.
     * @param {UpdateProductParams} update_data - The data to update the product with.
     * @returns {Promise<Product>} The updated product.
     */
    updateProduct(product_id: string, update_data: UpdateProductParams): Promise<Product>;
    /**
     * Retrieves a single product by its ID.
     * @param {string} product_id - The ID of the product to retrieve.
     * @returns {Promise<Product>} The requested product.
     */
    getProduct(product_id: string): Promise<Product>;
    /**
     * Lists all products with optional pagination.
     * @param {number} [per_page=10] - The number of products to return per page.
     * @returns {Promise<ListResponse<Product>>} A paginated list of products.
     */
    listProducts(per_page?: number): Promise<ListResponse<Product>>;
    /**
     * Deletes a product by its ID.
     * @param {string} product_id - The ID of the product to delete.
     * @returns {Promise<DeleteItemResponse>} Confirmation of the product deletion.
     */
    deleteProduct(product_id: string): Promise<DeleteItemResponse>;
    /**
     * Retrieves all prices associated with a product, with optional pagination.
     * @param {string} product_id - The ID of the product whose prices are to be retrieved.
     * @param {number} [per_page=10] - The number of prices to return per page.
     * @returns {Promise<ListResponse<ProductPrice>>} A paginated list of prices for the specified product.
     */
    getProductPrices(product_id: string, per_page?: number): Promise<ListResponse<ProductPrice>>;
    /**
     * Creates a new price for a product.
     * @param {CreatePriceParams} price_data - The details of the new price to be created.
     * @returns {Promise<Price>} The created price object.
     */
    createPrice(price_data: CreatePriceParams): Promise<Price>;
    /**
     * Updates the details of an existing price.
     * @param {string} price_id - The ID of the price to be updated.
     * @param {UpdatePriceParams} update_data - The new details for the price.
     * @returns {Promise<Price>} The updated price object.
     */
    updatePrice(price_id: string, update_data: UpdatePriceParams): Promise<Price>;
    /**
     * Retrieves a single price by its ID.
     * @param {string} price_id - The ID of the price to retrieve.
     * @returns {Promise<Price>} The requested price object.
     */
    getPrice(price_id: string): Promise<Price>;
    /**
     * Lists all prices for products with optional pagination.
     * @param {number} [per_page=10] - The number of price objects to return per page.
     * @returns {Promise<ListResponse<Price>>} A paginated list of prices.
     */
    listPrices(per_page?: number): Promise<ListResponse<Price>>;
    /**
     * Creates a new checkout session with the specified details.
     * @param {CreateCheckoutParams} checkout_data - The details for the new checkout session.
     * @returns {Promise<Checkout>} The created checkout object.
     */
    createCheckout(checkout_data: CreateCheckoutParams): Promise<Checkout>;
    /**
     * Retrieves details of a specific checkout session by its ID.
     * @param {string} checkout_id - The ID of the checkout session to retrieve.
     * @returns {Promise<Checkout>} The requested checkout object.
     */
    getCheckout(checkout_id: string): Promise<Checkout>;
    /**
     * Lists all checkout sessions with optional pagination.
     * @param {number} [per_page=10] - The number of checkout objects to return per page.
     * @returns {Promise<ListResponse<Checkout>>} A paginated list of checkout sessions.
     */
    listCheckouts(per_page?: number): Promise<ListResponse<Checkout>>;
    /**
     * Retrieves all items included in a specific checkout session, with optional pagination.
     * @param {string} checkout_id - The ID of the checkout session.
     * @param {number} [per_page=10] - The number of items to return per page.
     * @returns {Promise<ListResponse<CheckoutItemParams>>} A paginated list of items in the checkout session.
     */
    getCheckoutItems(checkout_id: string, per_page?: number): Promise<ListResponse<CheckoutItemParams>>;
    /**
     * Expires a specific checkout session before its automatic expiration.
     * @param {string} checkout_id - The ID of the checkout session to expire.
     * @returns {Promise<Checkout>} The expired checkout object, indicating the session is no longer valid for payment.
     */
    expireCheckout(checkout_id: string): Promise<Checkout>;
    /**
     * Creates a new payment link.
     * @param {CreatePaymentLinkParams} payment_link_data - The details for the new payment link.
     * @returns {Promise<PaymentLink>} The created payment link object.
     */
    createPaymentLink(payment_link_data: CreatePaymentLinkParams): Promise<PaymentLink>;
    /**
     * Updates an existing payment link identified by its ID.
     * @param {string} payment_link_id - The ID of the payment link to update.
     * @param {UpdatePaymentLinkParams} update_data - The new details for the payment link.
     * @returns {Promise<PaymentLink>} The updated payment link object.
     */
    updatePaymentLink(payment_link_id: string, update_data: UpdatePaymentLinkParams): Promise<PaymentLink>;
    /**
     * Retrieves details of a specific payment link by its ID.
     * @param {string} payment_link_id - The ID of the payment link to retrieve.
     * @returns {Promise<PaymentLink>} The requested payment link object.
     */
    getPaymentLink(payment_link_id: string): Promise<PaymentLink>;
    /**
     * Lists all payment links with optional pagination.
     * @param {number} [per_page=10] - The number of payment link objects to return per page.
     * @returns {Promise<ListResponse<PaymentLink>>} A paginated list of payment links.
     */
    listPaymentLinks(per_page?: number): Promise<ListResponse<PaymentLink>>;
    /**
     * Retrieves all items associated with a specific payment link, with optional pagination.
     * @param {string} payment_link_id - The ID of the payment link whose items are to be retrieved.
     * @param {number} [per_page=10] - The number of items to return per page.
     * @returns {Promise<ListResponse<PaymentLinkItemParams>>} A paginated list of items associated with the payment link.
     */
    getPaymentLinkItems(payment_link_id: string, per_page?: number): Promise<ListResponse<PaymentLinkItemParams>>;
}
