"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChargilyClient = void 0;
var consts_1 = require("../consts");
/**
 * A client for interacting with Chargily's API, supporting operations for customers, products, prices, checkouts, and payment links.
 */
var ChargilyClient = /** @class */ (function () {
    /**
     * Constructs a ChargilyClient instance.
     * @param {ChargilyClientOptions} options - Configuration options including API key and mode.
     */
    function ChargilyClient(options) {
        this.api_key = options.api_key;
        this.base_url =
            options.mode === 'test' ? consts_1.CHARGILY_TEST_URL : consts_1.CHARGILY_LIVE_URL;
    }
    /**
     * Internal method to make requests to the Chargily API.
     * @param {string} endpoint - The endpoint path to make the request to.
     * @param {string} [method='GET'] - The HTTP method for the request.
     * @param {Object} [body] - The request payload, necessary for POST or PATCH requests.
     * @returns {Promise<any>} - The JSON response from the API.
     * @private
     */
    ChargilyClient.prototype.request = function (endpoint, method, body) {
        if (method === void 0) { method = 'GET'; }
        return __awaiter(this, void 0, void 0, function () {
            var url, headers, fetchOptions, response, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "".concat(this.base_url, "/").concat(endpoint);
                        headers = {
                            Authorization: "Bearer ".concat(this.api_key),
                            'Content-Type': 'application/json',
                        };
                        fetchOptions = {
                            method: method,
                            headers: headers,
                        };
                        if (body !== undefined) {
                            fetchOptions.body = JSON.stringify(body);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fetch(url, fetchOptions)];
                    case 2:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new Error("API request failed with status ".concat(response.status, ": ").concat(response.statusText));
                        }
                        return [2 /*return*/, response.json()];
                    case 3:
                        error_1 = _a.sent();
                        throw new Error("Failed to make API request: ".concat(error_1));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves the current balance information from the Chargily API.
     * @returns {Promise<Balance>} - A promise that resolves to the balance information.
     */
    ChargilyClient.prototype.getBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('balance', 'GET')];
            });
        });
    };
    /**
     * Creates a new customer with specified details.
     * @param {CreateCustomerParams} customer_data - The data for creating a new customer.
     * @returns {Promise<Customer>} - A promise that resolves to the newly created customer.
     */
    ChargilyClient.prototype.createCustomer = function (customer_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('customers', 'POST', customer_data)];
            });
        });
    };
    /**
     * Fetches a customer by their unique identifier.
     * @param {string} customer_id - The ID of the customer to retrieve.
     * @returns {Promise<Customer>} - A promise that resolves to the customer details.
     */
    ChargilyClient.prototype.getCustomer = function (customer_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("customers/".concat(customer_id), 'GET')];
            });
        });
    };
    /**
     * Updates an existing customer's details.
     * @param {string} customer_id - The ID of the customer to update.
     * @param {UpdateCustomerParams} update_data - New data for updating the customer.
     * @returns {Promise<Customer>} - A promise that resolves to the updated customer details.
     */
    ChargilyClient.prototype.updateCustomer = function (customer_id, update_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("customers/".concat(customer_id), 'PATCH', update_data)];
            });
        });
    };
    /**
     * Deletes a customer by their unique identifier.
     * @param {string} customer_id - The ID of the customer to delete.
     * @returns {Promise<DeleteItemResponse>} - A promise that resolves to the deletion response.
     */
    ChargilyClient.prototype.deleteCustomer = function (customer_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("customers/".concat(customer_id), 'DELETE')];
            });
        });
    };
    /**
     * Lists customers, optionally paginated.
     * @param {number} [per_page=10] - The number of customers to return per page.
     * @returns {Promise<ListResponse<Customer>>} - A promise that resolves to a paginated list of customers.
     */
    ChargilyClient.prototype.listCustomers = function (per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "customers?per_page=".concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Creates a new product with the given details.
     * @param {CreateProductParams} product_data - The data for creating the product.
     * @returns {Promise<Product>} The created product.
     */
    ChargilyClient.prototype.createProduct = function (product_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('products', 'POST', product_data)];
            });
        });
    };
    /**
     * Updates an existing product identified by its ID.
     * @param {string} product_id - The ID of the product to update.
     * @param {UpdateProductParams} update_data - The data to update the product with.
     * @returns {Promise<Product>} The updated product.
     */
    ChargilyClient.prototype.updateProduct = function (product_id, update_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("products/".concat(product_id), 'POST', update_data)];
            });
        });
    };
    /**
     * Retrieves a single product by its ID.
     * @param {string} product_id - The ID of the product to retrieve.
     * @returns {Promise<Product>} The requested product.
     */
    ChargilyClient.prototype.getProduct = function (product_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("products/".concat(product_id), 'GET')];
            });
        });
    };
    /**
     * Lists all products with optional pagination.
     * @param {number} [per_page=10] - The number of products to return per page.
     * @returns {Promise<ListResponse<Product>>} A paginated list of products.
     */
    ChargilyClient.prototype.listProducts = function (per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "products?per_page=".concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Deletes a product by its ID.
     * @param {string} product_id - The ID of the product to delete.
     * @returns {Promise<DeleteItemResponse>} Confirmation of the product deletion.
     */
    ChargilyClient.prototype.deleteProduct = function (product_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("products/".concat(product_id), 'DELETE')];
            });
        });
    };
    /**
     * Retrieves all prices associated with a product, with optional pagination.
     * @param {string} product_id - The ID of the product whose prices are to be retrieved.
     * @param {number} [per_page=10] - The number of prices to return per page.
     * @returns {Promise<ListResponse<ProductPrice>>} A paginated list of prices for the specified product.
     */
    ChargilyClient.prototype.getProductPrices = function (product_id, per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "products/".concat(product_id, "/prices?per_page=").concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Creates a new price for a product.
     * @param {CreatePriceParams} price_data - The details of the new price to be created.
     * @returns {Promise<Price>} The created price object.
     */
    ChargilyClient.prototype.createPrice = function (price_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('prices', 'POST', price_data)];
            });
        });
    };
    /**
     * Updates the details of an existing price.
     * @param {string} price_id - The ID of the price to be updated.
     * @param {UpdatePriceParams} update_data - The new details for the price.
     * @returns {Promise<Price>} The updated price object.
     */
    ChargilyClient.prototype.updatePrice = function (price_id, update_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("prices/".concat(price_id), 'POST', update_data)];
            });
        });
    };
    /**
     * Retrieves a single price by its ID.
     * @param {string} price_id - The ID of the price to retrieve.
     * @returns {Promise<Price>} The requested price object.
     */
    ChargilyClient.prototype.getPrice = function (price_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("prices/".concat(price_id), 'GET')];
            });
        });
    };
    /**
     * Lists all prices for products with optional pagination.
     * @param {number} [per_page=10] - The number of price objects to return per page.
     * @returns {Promise<ListResponse<Price>>} A paginated list of prices.
     */
    ChargilyClient.prototype.listPrices = function (per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "prices?per_page=".concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Creates a new checkout session with the specified details.
     * @param {CreateCheckoutParams} checkout_data - The details for the new checkout session.
     * @returns {Promise<Checkout>} The created checkout object.
     */
    ChargilyClient.prototype.createCheckout = function (checkout_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!checkout_data.success_url.startsWith('http') &&
                    !checkout_data.success_url.startsWith('https')) {
                    throw new Error('Invalid success_url, it must begin with http or https.');
                }
                if (!checkout_data.items &&
                    (!checkout_data.amount || !checkout_data.currency)) {
                    throw new Error('The items field is required when amount and currency are not present.');
                }
                return [2 /*return*/, this.request('checkouts', 'POST', checkout_data)];
            });
        });
    };
    /**
     * Retrieves details of a specific checkout session by its ID.
     * @param {string} checkout_id - The ID of the checkout session to retrieve.
     * @returns {Promise<Checkout>} The requested checkout object.
     */
    ChargilyClient.prototype.getCheckout = function (checkout_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("checkouts/".concat(checkout_id), 'GET')];
            });
        });
    };
    /**
     * Lists all checkout sessions with optional pagination.
     * @param {number} [per_page=10] - The number of checkout objects to return per page.
     * @returns {Promise<ListResponse<Checkout>>} A paginated list of checkout sessions.
     */
    ChargilyClient.prototype.listCheckouts = function (per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "checkouts?per_page=".concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Retrieves all items included in a specific checkout session, with optional pagination.
     * @param {string} checkout_id - The ID of the checkout session.
     * @param {number} [per_page=10] - The number of items to return per page.
     * @returns {Promise<ListResponse<CheckoutItemParams>>} A paginated list of items in the checkout session.
     */
    ChargilyClient.prototype.getCheckoutItems = function (checkout_id, per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "checkouts/".concat(checkout_id, "/items?per_page=").concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Expires a specific checkout session before its automatic expiration.
     * @param {string} checkout_id - The ID of the checkout session to expire.
     * @returns {Promise<Checkout>} The expired checkout object, indicating the session is no longer valid for payment.
     */
    ChargilyClient.prototype.expireCheckout = function (checkout_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("checkouts/".concat(checkout_id, "/expire"), 'POST')];
            });
        });
    };
    /**
     * Creates a new payment link.
     * @param {CreatePaymentLinkParams} payment_link_data - The details for the new payment link.
     * @returns {Promise<PaymentLink>} The created payment link object.
     */
    ChargilyClient.prototype.createPaymentLink = function (payment_link_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('payment-links', 'POST', payment_link_data)];
            });
        });
    };
    /**
     * Updates an existing payment link identified by its ID.
     * @param {string} payment_link_id - The ID of the payment link to update.
     * @param {UpdatePaymentLinkParams} update_data - The new details for the payment link.
     * @returns {Promise<PaymentLink>} The updated payment link object.
     */
    ChargilyClient.prototype.updatePaymentLink = function (payment_link_id, update_data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("payment-links/".concat(payment_link_id), 'POST', update_data)];
            });
        });
    };
    /**
     * Retrieves details of a specific payment link by its ID.
     * @param {string} payment_link_id - The ID of the payment link to retrieve.
     * @returns {Promise<PaymentLink>} The requested payment link object.
     */
    ChargilyClient.prototype.getPaymentLink = function (payment_link_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("payment-links/".concat(payment_link_id), 'GET')];
            });
        });
    };
    /**
     * Lists all payment links with optional pagination.
     * @param {number} [per_page=10] - The number of payment link objects to return per page.
     * @returns {Promise<ListResponse<PaymentLink>>} A paginated list of payment links.
     */
    ChargilyClient.prototype.listPaymentLinks = function (per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "payment-links?per_page=".concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Retrieves all items associated with a specific payment link, with optional pagination.
     * @param {string} payment_link_id - The ID of the payment link whose items are to be retrieved.
     * @param {number} [per_page=10] - The number of items to return per page.
     * @returns {Promise<ListResponse<PaymentLinkItemParams>>} A paginated list of items associated with the payment link.
     */
    ChargilyClient.prototype.getPaymentLinkItems = function (payment_link_id, per_page) {
        if (per_page === void 0) { per_page = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = "payment-links/".concat(payment_link_id, "/items?per_page=").concat(per_page);
                        return [4 /*yield*/, this.request(endpoint, 'GET')];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return ChargilyClient;
}());
exports.ChargilyClient = ChargilyClient;
